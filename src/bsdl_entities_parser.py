#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class bsdlEntitiesBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(bsdlEntitiesBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class bsdlEntitiesParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=bsdlEntitiesBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(bsdlEntitiesParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _vhdl_identifier_(self):
        self._pattern(r'[a-zA-Z][0-9a-zA-Z_]*')

    @graken()
    def _integer_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _port_name_(self):
        self._vhdl_identifier_()

    @graken()
    def _pin_map_string_(self):

        def sep0():
            with self._group():
                self._comma_()

        def block0():
            self._port_map_()
            self.name_last_node('port_map')
        self._positive_gather(block0, sep0)
        self.ast._define(
            ['port_map'],
            []
        )

    @graken()
    def _port_map_(self):
        self._port_name_()
        self.name_last_node('port_name')
        self._colon_()
        self._pin_list_()
        self.name_last_node('pin_list')
        self.ast._define(
            ['pin_list', 'port_name'],
            []
        )

    @graken()
    def _pin_list_(self):
        with self._choice():
            with self._option():
                self._pin_id_()
                self.add_last_node_to_name('@')
            with self._option():
                with self._group():
                    self._token('(')
                    self._pin_id_()
                    self.add_last_node_to_name('@')

                    def block2():
                        self._comma_()
                        self._pin_id_()
                        self.add_last_node_to_name('@')
                    self._positive_closure(block2)
                    self._token(')')
            self._error('no available options')

    @graken()
    def _pin_id_(self):
        with self._choice():
            with self._option():
                self._vhdl_identifier_()
            with self._option():
                self._integer_()
            self._error('no available options')

    @graken()
    def _comma_(self):
        self._token(',')

    @graken()
    def _colon_(self):
        self._token(':')


class bsdlEntitiesSemantics(object):
    def vhdl_identifier(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def port_name(self, ast):
        return ast

    def pin_map_string(self, ast):
        return ast

    def port_map(self, ast):
        return ast

    def pin_list(self, ast):
        return ast

    def pin_id(self, ast):
        return ast

    def comma(self, ast):
        return ast

    def colon(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = bsdlEntitiesParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, bsdlEntitiesParser, name='bsdlEntities')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
